package com.bezkoder.spring.jdbc.mysql.controller;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bezkoder.spring.jdbc.mysql.model.Mst_BillerType;
import com.bezkoder.spring.jdbc.mysql.model.Tutorial;
import com.bezkoder.spring.jdbc.mysql.repository.Mst_BillerTypeRepository;
import com.bezkoder.spring.jdbc.mysql.repository.TutorialRepository;

@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")
public class TutorialController {

  @Autowired
  TutorialRepository tutorialRepository;
  
  @Autowired
  Mst_BillerTypeRepository billerTypeRepository;

  @GetMapping("/tutorials")
  public ResponseEntity<List<Tutorial>> getAllTutorials(@RequestParam(required = false) String title) {
    try {
      List<Tutorial> tutorials = new ArrayList<Tutorial>();

      if (title == null)
        tutorialRepository.findAll().forEach(tutorials::add);
      else
        tutorialRepository.findByTitleContaining(title).forEach(tutorials::add);

      if (tutorials.isEmpty()) {
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
      }

      return new ResponseEntity<>(tutorials, HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @GetMapping("/tutorials/{id}")
  public ResponseEntity<Tutorial> getTutorialById(@PathVariable("id") long id) {
    Tutorial tutorial = tutorialRepository.findById(id);

    if (tutorial != null) {
      return new ResponseEntity<>(tutorial, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
  }

  @PostMapping("/tutorials")
  public ResponseEntity<String> createTutorial(@RequestBody Tutorial tutorial) {
    try {
      tutorialRepository.save(new Tutorial(tutorial.getTitle(), tutorial.getDescription(), false));
      return new ResponseEntity<>("Tutorial was created successfully.", HttpStatus.CREATED);
    } catch (Exception e) {
      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @PutMapping("/tutorials/{id}")
  public ResponseEntity<String> updateTutorial(@PathVariable("id") long id, @RequestBody Tutorial tutorial) {
    Tutorial _tutorial = tutorialRepository.findById(id);

    if (_tutorial != null) {
      _tutorial.setId(id);
      _tutorial.setTitle(tutorial.getTitle());
      _tutorial.setDescription(tutorial.getDescription());
      _tutorial.setPublished(tutorial.isPublished());

      tutorialRepository.update(_tutorial);
      return new ResponseEntity<>("Tutorial was updated successfully.", HttpStatus.OK);
    } else {
      return new ResponseEntity<>("Cannot find Tutorial with id=" + id, HttpStatus.NOT_FOUND);
    }
  }

  @DeleteMapping("/tutorials/{id}")
  public ResponseEntity<String> deleteTutorial(@PathVariable("id") long id) {
    try {
      int result = tutorialRepository.deleteById(id);
      if (result == 0) {
        return new ResponseEntity<>("Cannot find Tutorial with id=" + id, HttpStatus.OK);
      }
      return new ResponseEntity<>("Tutorial was deleted successfully.", HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>("Cannot delete tutorial.", HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @DeleteMapping("/tutorials")
  public ResponseEntity<String> deleteAllTutorials() {
    try {
      int numRows = tutorialRepository.deleteAll();
      return new ResponseEntity<>("Deleted " + numRows + " Tutorial(s) successfully.", HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>("Cannot delete tutorials.", HttpStatus.INTERNAL_SERVER_ERROR);
    }

  }

  @GetMapping("/tutorials/published")
  public ResponseEntity<List<Tutorial>> findByPublished() {
    try {
      List<Tutorial> tutorials = tutorialRepository.findByPublished(true);

      if (tutorials.isEmpty()) {
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
      }
      return new ResponseEntity<>(tutorials, HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
  
  
  
//json read method scheduler cron job run 
  
  @Scheduled(cron = "0/10 * * * * ?")
  public void testBiller() {
		
		JSONParser jsonParser = new JSONParser();
      
      try (FileReader reader = new FileReader("D:\\_projects\\Asif\\HGA1F0A3990000021241.json"))
      {
          //Read JSON file
          Object obj = jsonParser.parse(reader);
          org.json.simple.JSONArray billerList = (org.json.simple.JSONArray) obj;
          System.out.println(billerList);
          
        billerList.forEach( emp -> parseBillerObject( (org.json.simple.JSONObject) emp ) );
      } catch (FileNotFoundException e) {
          e.printStackTrace();
      } catch (IOException e) {
          e.printStackTrace();
      } catch (ParseException e) {
          e.printStackTrace();
      }
  }
  
  
  private void parseBillerObject(org.json.simple.JSONObject biller) 
  {
	  Mst_BillerType biller1 = new Mst_BillerType();
      String biller_type = (String) biller.get("biller_type");
      Date createdDate = (Date) biller.get("biller_created_date");
      Date modifiedDate = (Date) biller.get("biller_lastmodified_date");
      
      biller1.setBillerType(biller_type);
      biller1.setCreatedOn(createdDate);
      biller1.setCreatedBy(0);
      biller1.setModifiedOn(modifiedDate);
      biller1.setModifiedBy(0);
      
      billerTypeRepository.saveBillerType(biller1);
       
  }

}
==============================================================================================


package com.bezkoder.spring.jdbc.mysql.model;

import java.util.Date;

public class Mst_BillerType {

	private int id;
	private String billerType;

	private Date createdOn;
	private int createdBy;
	private Date modifiedOn;
	private int modifiedBy;
	private String isDeleted;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getBillerType() {
		return billerType;
	}

	public void setBillerType(String billerType) {
		this.billerType = billerType;
	}

	public Date getCreatedOn() {
		return createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	public int getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(int createdBy) {
		this.createdBy = createdBy;
	}

	public Date getModifiedOn() {
		return modifiedOn;
	}

	public void setModifiedOn(Date modifiedOn) {
		this.modifiedOn = modifiedOn;
	}

	public int getModifiedBy() {
		return modifiedBy;
	}

	public void setModifiedBy(int modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	public String getIsDeleted() {
		return isDeleted;
	}

	public void setIsDeleted(String isDeleted) {
		this.isDeleted = isDeleted;
	}

	@Override
	public String toString() {
		return "Mst_BillerType [id=" + id + ", billerType=" + billerType + ", createdOn=" + createdOn + ", createdBy="
				+ createdBy + ", modifiedOn=" + modifiedOn + ", modifiedBy=" + modifiedBy + ", isDeleted=" + isDeleted
				+ "]";
	}

	public Mst_BillerType() {

	}
	
	public Mst_BillerType(int id, String billerType, Date createdOn, int createdBy, Date modifiedOn, int modifiedBy,
			String isDeleted) {
		this.id = id;
		this.billerType = billerType;
		this.createdOn = createdOn;
		this.createdBy = createdBy;
		this.modifiedOn = modifiedOn;
		this.modifiedBy = modifiedBy;
		this.isDeleted = isDeleted;
	}
	
	public Mst_BillerType(String billerType, Date createdOn, int createdBy, Date modifiedOn, int modifiedBy,
			String isDeleted) {
		this.billerType = billerType;
		this.createdOn = createdOn;
		this.createdBy = createdBy;
		this.modifiedOn = modifiedOn;
		this.modifiedBy = modifiedBy;
		this.isDeleted = isDeleted;
	}


}
================================================================================================================

package com.bezkoder.spring.jdbc.mysql.repository;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.bezkoder.spring.jdbc.mysql.model.Mst_BillerType;
import com.bezkoder.spring.jdbc.mysql.model.Tutorial;

@Repository
public class Mst_BillerTypeRepository implements TutorialRepository {

	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	
	@Override
	public int saveBillerType(Mst_BillerType billerType) {
		return jdbcTemplate.update("INSERT INTO tbl_mstbillertype (BillerType, CreatedOn, CreatedBy,ModifiedOn,ModifiedBy) VALUES(?,?,?,?,?)",
		        new Object[] { billerType.getBillerType(), billerType.getCreatedOn(), billerType.getCreatedBy(),
		        		billerType.getModifiedOn(),billerType.getModifiedBy()});
	}
	 
	 
	@Override
	public int save(Tutorial book) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int update(Tutorial book) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int updateBillerType(Mst_BillerType book) {
		 return 0;
	}

	@Override
	public Tutorial findById(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int deleteById(Long id) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<Tutorial> findAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Tutorial> findByPublished(boolean published) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Tutorial> findByTitleContaining(String title) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int deleteAll() {
		// TODO Auto-generated method stub
		return 0;
	}

}


===========================================================================================================================

package com.bezkoder.spring.jdbc.mysql.repository;

import java.util.List;

import com.bezkoder.spring.jdbc.mysql.model.Mst_BillerType;
import com.bezkoder.spring.jdbc.mysql.model.Tutorial;

public interface TutorialRepository {
  int save(Tutorial book);

  int update(Tutorial book);
  
  int saveBillerType(Mst_BillerType book);

  int updateBillerType(Mst_BillerType book);

  Tutorial findById(Long id);

  int deleteById(Long id);

  List<Tutorial> findAll();

  List<Tutorial> findByPublished(boolean published);

  List<Tutorial> findByTitleContaining(String title);

  int deleteAll();
}
============================================================================


<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
